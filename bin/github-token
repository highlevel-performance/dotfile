#!/usr/bin/env bash

# ================================
# GitHub Token Manager
# Securely store and manage GitHub Personal Access Tokens
# ================================

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Token storage directory
TOKEN_DIR="$HOME/.github-tokens"
mkdir -p "$TOKEN_DIR"
chmod 700 "$TOKEN_DIR"  # Only owner can access

show_help() {
    cat << 'EOF'
GitHub Token Manager
====================

Usage:
  github-token set <profile>      Set token for profile (personal/work)
  github-token get <profile>      Get token for profile
  github-token delete <profile>   Delete token for profile
  github-token list              List configured profiles
  github-token test <profile>    Test if token is valid

Examples:
  github-token set personal      # Set personal GitHub token
  github-token set work         # Set work GitHub token
  github-token get personal     # Get personal token
  github-token test work        # Test work token

Security:
  - Tokens are stored in ~/.github-tokens/
  - Directory has 700 permissions (owner only)
  - Files have 600 permissions (owner read/write only)
  - Tokens are stored in plain text (use macOS Keychain for better security)

For macOS Keychain storage (more secure):
  - Use: gh auth login (GitHub CLI)
  - Or: git credential-osxkeychain

EOF
}

# Set token for a profile
set_token() {
    local profile=$1
    
    if [ -z "$profile" ]; then
        echo -e "${RED}Error: Profile name required${NC}"
        echo "Usage: github-token set <profile>"
        return 1
    fi
    
    echo -e "${BLUE}Setting GitHub token for profile: ${GREEN}$profile${NC}"
    echo ""
    echo -e "${YELLOW}How to create a GitHub Personal Access Token:${NC}"
    echo "1. Go to: https://github.com/settings/tokens"
    echo "2. Click 'Generate new token (classic)'"
    echo "3. Select scopes:"
    echo "   - repo (for private repos)"
    echo "   - workflow (for GitHub Actions)"
    echo "   - read:org (for organizations)"
    echo "4. Copy the generated token"
    echo ""
    
    read -sp "Enter GitHub token for $profile: " token
    echo ""
    
    if [ -z "$token" ]; then
        echo -e "${RED}Error: Token cannot be empty${NC}"
        return 1
    fi
    
    # Save token
    local token_file="$TOKEN_DIR/$profile.token"
    echo "$token" > "$token_file"
    chmod 600 "$token_file"
    
    # Save to git config
    git config --global "github.token.$profile" "$token"
    
    echo -e "${GREEN}✅ Token saved for $profile profile${NC}"
    echo ""
    echo "Token stored in:"
    echo "  - File: $token_file"
    echo "  - Git config: github.token.$profile"
    echo ""
    echo "To use this token with git:"
    echo "  git clone https://\$(github-token get $profile)@github.com/username/repo.git"
    echo ""
    echo "Or configure git credential helper:"
    echo "  git config --global credential.helper osxkeychain"
}

# Get token for a profile
get_token() {
    local profile=$1
    
    if [ -z "$profile" ]; then
        echo -e "${RED}Error: Profile name required${NC}" >&2
        return 1
    fi
    
    local token_file="$TOKEN_DIR/$profile.token"
    
    if [ ! -f "$token_file" ]; then
        echo -e "${RED}Error: No token found for profile '$profile'${NC}" >&2
        echo "Run: github-token set $profile" >&2
        return 1
    fi
    
    cat "$token_file"
}

# Delete token
delete_token() {
    local profile=$1
    
    if [ -z "$profile" ]; then
        echo -e "${RED}Error: Profile name required${NC}"
        return 1
    fi
    
    local token_file="$TOKEN_DIR/$profile.token"
    
    if [ ! -f "$token_file" ]; then
        echo -e "${YELLOW}No token found for profile '$profile'${NC}"
        return 0
    fi
    
    rm -f "$token_file"
    git config --global --unset "github.token.$profile" 2>/dev/null
    
    echo -e "${GREEN}✅ Token deleted for $profile profile${NC}"
}

# List configured profiles
list_tokens() {
    echo -e "${BLUE}Configured GitHub Tokens:${NC}"
    echo ""
    
    if [ ! -d "$TOKEN_DIR" ] || [ -z "$(ls -A $TOKEN_DIR 2>/dev/null)" ]; then
        echo "  No tokens configured"
        echo ""
        echo "Run: github-token set personal"
        echo "     github-token set work"
        return 0
    fi
    
    for token_file in "$TOKEN_DIR"/*.token; do
        if [ -f "$token_file" ]; then
            local profile=$(basename "$token_file" .token)
            local token=$(cat "$token_file")
            local masked_token="${token:0:4}...${token: -4}"
            echo -e "  ${GREEN}$profile${NC}: $masked_token"
        fi
    done
    echo ""
}

# Test if token is valid
test_token() {
    local profile=$1
    
    if [ -z "$profile" ]; then
        echo -e "${RED}Error: Profile name required${NC}"
        return 1
    fi
    
    local token=$(get_token "$profile" 2>/dev/null)
    
    if [ -z "$token" ]; then
        return 1
    fi
    
    echo -e "${BLUE}Testing token for $profile...${NC}"
    
    # Test token by making API call
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $token" https://api.github.com/user)
    
    if [ "$http_code" = "200" ]; then
        # Get username if successful
        local response=$(curl -s -H "Authorization: token $token" https://api.github.com/user)
        local username=$(echo "$response" | python3 -c "import sys, json; print(json.load(sys.stdin).get('login', ''))" 2>/dev/null || echo "")
        
        echo -e "${GREEN}✅ Token is valid${NC}"
        [ -n "$username" ] && echo "  GitHub Username: $username"
        return 0
    else
        echo -e "${RED}❌ Token is invalid or expired${NC}"
        echo "  HTTP Status: $http_code"
        return 1
    fi
}

# Main function
main() {
    case "$1" in
        set)
            set_token "$2"
            ;;
        get)
            get_token "$2"
            ;;
        delete|remove)
            delete_token "$2"
            ;;
        list|ls)
            list_tokens
            ;;
        test)
            test_token "$2"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${BLUE}GitHub Token Manager${NC}"
            echo ""
            echo "Usage: github-token <command> [profile]"
            echo ""
            echo "Commands:"
            echo "  set <profile>      Set token for profile"
            echo "  get <profile>      Get token for profile"
            echo "  delete <profile>   Delete token"
            echo "  list              List all tokens"
            echo "  test <profile>    Test if token is valid"
            echo "  help              Show detailed help"
            echo ""
            echo "Examples:"
            echo "  github-token set personal"
            echo "  github-token set work"
            echo "  github-token list"
            ;;
    esac
}

main "$@"
